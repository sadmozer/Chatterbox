Breakpoint 1 at 0x402244: file chatty.c, line 235.
Starting program: /mnt/c/Users/Nick/Desktop/Universita/IV sem/SOL - Massimo Torquati/kit_chatty AGGIORNATO/kit_chatty/chatty -f DATA/chatty.conf1
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
[New Thread 0x7ffffee00700 (LWP 74)]
[New Thread 0x7ffffe5f0700 (LWP 75)]
[New Thread 0x7ffffdde0700 (LWP 76)]
[New Thread 0x7ffffd5d0700 (LWP 77)]
[New Thread 0x7ffffcdc0700 (LWP 78)]
[New Thread 0x7ffffc5b0700 (LWP 79)]
[New Thread 0x7ffffbda0700 (LWP 80)]
[New Thread 0x7ffffb590700 (LWP 81)]
[New Thread 0x7ffffad80700 (LWP 82)]
[New Thread 0x7ffffa570700 (LWP 83)]
[New Thread 0x7ffff9d60700 (LWP 84)]
[New Thread 0x7ffff9550700 (LWP 85)]
[New Thread 0x7ffff8d40700 (LWP 86)]
[New Thread 0x7ffff8530700 (LWP 87)]
[New Thread 0x7ffff7d20700 (LWP 88)]
[New Thread 0x7ffff7510700 (LWP 89)]
[New Thread 0x7ffff6d00700 (LWP 90)]
[Switching to Thread 0x7ffffa570700 (LWP 83)]

Breakpoint 1, worker (arg=0x60ddd0) at chatty.c:235
235	                    printf("Worker[%d]: %s -> CONNECT_OP\n", idnumber, inmsg.hdr.sender);
[Switching to Thread 0x7ffff6d00700 (LWP 90)]

Breakpoint 1, worker (arg=0x60ddec) at chatty.c:235
235	                    printf("Worker[%d]: %s -> CONNECT_OP\n", idnumber, inmsg.hdr.sender);
238	                    g_list *list = to_list(users, mux_users);
239	                    icl_entry_t *corr = list->head;
241	                    setData(&outmsg.data, "", NULL, (list->num + 1) * (MAX_NAME_LENGTH + 1));
242	                    if ((outmsg.data.buf = (char *) my_malloc((list->num + 1) * (MAX_NAME_LENGTH + 1))) == NULL)
244	                    memset(outmsg.data.buf, 36, (list->num + 1) * (MAX_NAME_LENGTH + 1));
247	                    strncpy(outmsg.data.buf, inmsg.hdr.sender, strlen(inmsg.hdr.sender) + 1);
250	                    int i = 1;
251	                    while (corr != NULL){
252	                        strncpy(outmsg.data.buf + i * (MAX_NAME_LENGTH + 1), (char *)corr->key, strlen((char *)corr->key) + 1);
253	                        outmsg.data.buf[(MAX_NAME_LENGTH + 1) * (i + 1) - 1] = '\0';
254	                        i++;
255	                        corr = corr->next;
251	                    while (corr != NULL){
258	                    unsigned int hash1 = users->hash_function((void *) inmsg.hdr.sender) % users->nbuckets;
260	                    PTHREAD_MUTEX_LOCK(&mux_users[hash_lock(hash1)],  "CONNECT_OP mux");
261	                    user_data_t * ax = icl_hash_find(users, (void *)inmsg.hdr.sender);
262	                    if(ax == NULL)
273	                        if(ax->fd == -1){
274	                            updateStats(0, 1, 0, 0, 0, 0, 0);
275	                            printf("Worker[%d]: Utente passa da OFFLINE a ONLINE\n", idnumber);
278	                        printf("Worker[%d]: Vecchio fd %d aggiornato a %d\n", idnumber, ax->fd, fd);
279	                        ax->fd = fd;
281	                        setHeader(&outmsg.hdr, OP_OK, "");
282	                        SYS(sendHeader(fd, &outmsg.hdr), -1, "ERRORE sendheader CONNECT_OP");
283	                        SYS(sendData(fd, &outmsg.data), -1, "ERRORE senddata CONNECT_OP");
284	                        PTHREAD_MUTEX_UNLOCK(&mux_users[hash_lock(hash1)], "CONNECT_OP mux");
286	                    destroy_g(list);
287	                    my_free(outmsg.data.buf);                    
288	                } break;
687	                PTHREAD_MUTEX_LOCK(&mux_fd, "mux fd");
688	                printf("Worker[%d]: Rimetto il fd %d nel set\n", idnumber, fd);                                
689	                FD_SET(fd, &set);
690	                if(fd > fd_num)
691	                    fd_num = fd;
692	                PTHREAD_MUTEX_UNLOCK(&mux_fd, "mux fd");
712	            free_pointer(aux->key);
714	            my_free(aux);
720	        fflush(stdout);
131	    while(!eflag){
133	        setHeader(&outmsg.hdr, OP_FAIL, "");
134	        setData(&outmsg.data, "", NULL, (unsigned int) 0);
[Switching to Thread 0x7ffff7d20700 (LWP 88)]

Breakpoint 1, worker (arg=0x60dde4) at chatty.c:235
235	                    printf("Worker[%d]: %s -> CONNECT_OP\n", idnumber, inmsg.hdr.sender);

Program received signal SIGTRAP, Trace/breakpoint trap.
[Switching to Thread 0x7ffff6d00700 (LWP 90)]
0x0000000000401b68 in worker (arg=0x60ddec) at chatty.c:134
134	        setData(&outmsg.data, "", NULL, (unsigned int) 0);

Program received signal SIGTRAP, Trace/breakpoint trap.
[Switching to Thread 0x7ffff7d20700 (LWP 88)]
0x0000000000402257 in worker (arg=0x60dde4) at chatty.c:235
235	                    printf("Worker[%d]: %s -> CONNECT_OP\n", idnumber, inmsg.hdr.sender);

Program received signal SIGTRAP, Trace/breakpoint trap.
[Switching to Thread 0x7ffff6d00700 (LWP 90)]
0x0000000000401b6b in worker (arg=0x60ddec) at chatty.c:134
134	        setData(&outmsg.data, "", NULL, (unsigned int) 0);

Program received signal SIGTRAP, Trace/breakpoint trap.
[Switching to Thread 0x7ffff7d20700 (LWP 88)]
0x0000000000401280 in printf@plt ()
Single stepping until exit from function printf@plt,
which has no line number information.
__printf (format=0x408a7f "Worker[%d]: %s -> CONNECT_OP\n") at printf.c:28
28	printf.c: File o directory non esistente.

Program received signal SIGTRAP, Trace/breakpoint trap.
[Switching to Thread 0x7ffff6d00700 (LWP 90)]
setData (data=0x7ffff6cffdd0, rcv=0x19ff1d3400 <error: Cannot access memory at address 0x19ff1d3400>, buf=0x4088f6 "", 
    len=0) at ./message.h:96
96	static inline void setData(message_data_t *data, char *rcv, const char *buf, unsigned int len) {

Program received signal SIGTRAP, Trace/breakpoint trap.
[Switching to Thread 0x7ffff7d20700 (LWP 88)]
0x00007ffffee64349 in __printf (format=0x408a7f "Worker[%d]: %s -> CONNECT_OP\n") at printf.c:28
28	printf.c: File o directory non esistente.

Program received signal SIGTRAP, Trace/breakpoint trap.
[Switching to Thread 0x7ffff6d00700 (LWP 90)]
0x000000000040171d in setData (data=0x7ffff6cffdd0, 
    rcv=0x19ff1d3400 <error: Cannot access memory at address 0x19ff1d3400>, buf=0x4088f6 "", len=0) at ./message.h:96
96	static inline void setData(message_data_t *data, char *rcv, const char *buf, unsigned int len) {

Program received signal SIGTRAP, Trace/breakpoint trap.
[Switching to Thread 0x7ffff7d20700 (LWP 88)]
0x00007ffffee64358 in __printf (format=0x408a7f "Worker[%d]: %s -> CONNECT_OP\n") at printf.c:28
28	printf.c: File o directory non esistente.

Program received signal SIGTRAP, Trace/breakpoint trap.
[Switching to Thread 0x7ffff6d00700 (LWP 90)]
0x0000000000401720 in setData (data=0x7ffff6cffdd0, 
    rcv=0x19ff1d3400 <error: Cannot access memory at address 0x19ff1d3400>, buf=0x4088f6 "", len=0) at ./message.h:96
96	static inline void setData(message_data_t *data, char *rcv, const char *buf, unsigned int len) {

Program received signal SIGTRAP, Trace/breakpoint trap.
[Switching to Thread 0x7ffff7d20700 (LWP 88)]
__printf (format=0x408a7f "Worker[%d]: %s -> CONNECT_OP\n") at printf.c:32
32	printf.c: File o directory non esistente.
28	in printf.c
33	in printf.c

Program received signal SIGTRAP, Trace/breakpoint trap.
[Switching to Thread 0x7ffff6d00700 (LWP 90)]
0x0000000000401724 in setData (data=0x7ffff6cffdd0, 
    rcv=0x19ff1d3400 <error: Cannot access memory at address 0x19ff1d3400>, buf=0x4088f6 "", len=0) at ./message.h:96
96	static inline void setData(message_data_t *data, char *rcv, const char *buf, unsigned int len) {

Program received signal SIGTRAP, Trace/breakpoint trap.
[Switching to Thread 0x7ffff7d20700 (LWP 88)]
__printf (format=0x408a7f "Worker[%d]: %s -> CONNECT_OP\n") at printf.c:32
32	printf.c: File o directory non esistente.

Program received signal SIGTRAP, Trace/breakpoint trap.
[Switching to Thread 0x7ffff6d00700 (LWP 90)]
0x0000000000401728 in setData (data=0x7ffff6cffdf8, 
    rcv=0x19ff1d3400 <error: Cannot access memory at address 0x19ff1d3400>, buf=0x4088f6 "", len=0) at ./message.h:96
96	static inline void setData(message_data_t *data, char *rcv, const char *buf, unsigned int len) {

Program received signal SIGTRAP, Trace/breakpoint trap.
[Switching to Thread 0x7ffff7d20700 (LWP 88)]
0x00007ffffee643bd in __printf (format=0x408a7f "Worker[%d]: %s -> CONNECT_OP\n") at printf.c:32
32	printf.c: File o directory non esistente.
33	in printf.c

Program received signal SIGTRAP, Trace/breakpoint trap.
[Switching to Thread 0x7ffff6d00700 (LWP 90)]
0x000000000040172c in setData (data=0x7ffff6cffdf8, rcv=0x4088f6 "", buf=0x4088f6 "", len=0) at ./message.h:96
96	static inline void setData(message_data_t *data, char *rcv, const char *buf, unsigned int len) {

Program received signal SIGTRAP, Trace/breakpoint trap.
[Switching to Thread 0x7ffff7d20700 (LWP 88)]
0x00007ffffee643d1 in __printf (format=0x408a7f "Worker[%d]: %s -> CONNECT_OP\n") at printf.c:33
33	printf.c: File o directory non esistente.

Program received signal SIGTRAP, Trace/breakpoint trap.
[Switching to Thread 0x7ffff6d00700 (LWP 90)]
0x0000000000401730 in setData (data=0x7ffff6cffdf8, rcv=0x4088f6 "", buf=0x0, len=0) at ./message.h:96
96	static inline void setData(message_data_t *data, char *rcv, const char *buf, unsigned int len) {
98	    memset((char*)&(data->hdr), 0, sizeof(message_data_hdr_t));
101	    strncpy(data->hdr.receiver, rcv, strlen(rcv)+1);
102	    data->hdr.len  = len;
103	    data->buf      = (char *)buf;
104	}
worker (arg=0x60ddec) at chatty.c:135
135	        setHeader(&inmsg.hdr, OP_FAIL, "");        
136	        setData(&inmsg.data, "", NULL, (unsigned int) 0);
139	        printf("Worker[%d]: In attesa di fd in coda..\n", idnumber);
[Switching to Thread 0x7ffff7510700 (LWP 89)]

Breakpoint 1, worker (arg=0x60dde8) at chatty.c:235
235	                    printf("Worker[%d]: %s -> CONNECT_OP\n", idnumber, inmsg.hdr.sender);
238	                    g_list *list = to_list(users, mux_users);
239	                    icl_entry_t *corr = list->head;
241	                    setData(&outmsg.data, "", NULL, (list->num + 1) * (MAX_NAME_LENGTH + 1));
242	                    if ((outmsg.data.buf = (char *) my_malloc((list->num + 1) * (MAX_NAME_LENGTH + 1))) == NULL)
244	                    memset(outmsg.data.buf, 36, (list->num + 1) * (MAX_NAME_LENGTH + 1));
247	                    strncpy(outmsg.data.buf, inmsg.hdr.sender, strlen(inmsg.hdr.sender) + 1);
250	                    int i = 1;
251	                    while (corr != NULL){
252	                        strncpy(outmsg.data.buf + i * (MAX_NAME_LENGTH + 1), (char *)corr->key, strlen((char *)corr->key) + 1);
253	                        outmsg.data.buf[(MAX_NAME_LENGTH + 1) * (i + 1) - 1] = '\0';
254	                        i++;
255	                        corr = corr->next;
251	                    while (corr != NULL){
258	                    unsigned int hash1 = users->hash_function((void *) inmsg.hdr.sender) % users->nbuckets;
260	                    PTHREAD_MUTEX_LOCK(&mux_users[hash_lock(hash1)],  "CONNECT_OP mux");
261	                    user_data_t * ax = icl_hash_find(users, (void *)inmsg.hdr.sender);
262	                    if(ax == NULL)
273	                        if(ax->fd == -1){
274	                            updateStats(0, 1, 0, 0, 0, 0, 0);
275	                            printf("Worker[%d]: Utente passa da OFFLINE a ONLINE\n", idnumber);
278	                        printf("Worker[%d]: Vecchio fd %d aggiornato a %d\n", idnumber, ax->fd, fd);
279	                        ax->fd = fd;
281	                        setHeader(&outmsg.hdr, OP_OK, "");
282	                        SYS(sendHeader(fd, &outmsg.hdr), -1, "ERRORE sendheader CONNECT_OP");
283	                        SYS(sendData(fd, &outmsg.data), -1, "ERRORE senddata CONNECT_OP");
284	                        PTHREAD_MUTEX_UNLOCK(&mux_users[hash_lock(hash1)], "CONNECT_OP mux");
286	                    destroy_g(list);
287	                    my_free(outmsg.data.buf);                    
288	                } break;
687	                PTHREAD_MUTEX_LOCK(&mux_fd, "mux fd");
688	                printf("Worker[%d]: Rimetto il fd %d nel set\n", idnumber, fd);                                
689	                FD_SET(fd, &set);
690	                if(fd > fd_num)
691	                    fd_num = fd;
692	                PTHREAD_MUTEX_UNLOCK(&mux_fd, "mux fd");
712	            free_pointer(aux->key);
714	            my_free(aux);
720	        fflush(stdout);

Program received signal SIGABRT, Aborted.
[Switching to Thread 0x7ffff6d00700 (LWP 90)]
0x00007ffffee46c37 in __GI_raise (sig=sig@entry=6) at ../nptl/sysdeps/unix/sysv/linux/raise.c:56
56	../nptl/sysdeps/unix/sysv/linux/raise.c: File o directory non esistente.
[Thread 0x7ffff6d00700 (LWP 90) exited]
[Thread 0x7ffff7d20700 (LWP 88) exited]
[Thread 0x7ffff8530700 (LWP 87) exited]
[Thread 0x7ffff8d40700 (LWP 86) exited]
[Thread 0x7ffff9550700 (LWP 85) exited]
[Thread 0x7ffff9d60700 (LWP 84) exited]
[Thread 0x7ffffa570700 (LWP 83) exited]
[Thread 0x7ffffad80700 (LWP 82) exited]
[Thread 0x7ffffb590700 (LWP 81) exited]
[Thread 0x7ffffbda0700 (LWP 80) exited]
[Thread 0x7ffffc5b0700 (LWP 79) exited]
[Thread 0x7ffffcdc0700 (LWP 78) exited]
[Thread 0x7ffffd5d0700 (LWP 77) exited]
[Thread 0x7ffffdde0700 (LWP 76) exited]
[Thread 0x7ffffe5f0700 (LWP 75) exited]
[Thread 0x7ffffee00700 (LWP 74) exited]
[Thread 0x7fffff7b0740 (LWP 70) exited]
Couldn't get registers: Nessun processo corrisponde.
Cannot execute this command without a live selected thread.
Cannot execute this command without a live selected thread.
A debugging session is active.

	Inferior 1 [process 70] will be killed.

Quit anyway? (y or n) Not confirmed.
Cannot execute this command without a live selected thread.
A debugging session is active.

	Inferior 1 [process 70] will be killed.

Quit anyway? (y or n) Breakpoint 1 at 0x40330d: file chatty.c, line 440.
Starting program: /mnt/c/Users/Nick/Desktop/Universita/IV sem/SOL - Massimo Torquati/kit_chatty AGGIORNATO/kit_chatty/chatty -f DATA/chatty.conf1
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
[New Thread 0x7ffffee00700 (LWP 219)]
[New Thread 0x7ffffe5f0700 (LWP 220)]
[New Thread 0x7ffffdde0700 (LWP 221)]
[New Thread 0x7ffffd5d0700 (LWP 222)]
[New Thread 0x7ffffcdc0700 (LWP 223)]
[New Thread 0x7ffffc5b0700 (LWP 224)]
[New Thread 0x7ffffbda0700 (LWP 225)]
[New Thread 0x7ffffb590700 (LWP 226)]
[New Thread 0x7ffffad80700 (LWP 227)]
[New Thread 0x7ffffa570700 (LWP 228)]
[New Thread 0x7ffff9d60700 (LWP 229)]
[New Thread 0x7ffff9550700 (LWP 230)]
[New Thread 0x7ffff8d40700 (LWP 231)]
[New Thread 0x7ffff8530700 (LWP 232)]
[New Thread 0x7ffff7d20700 (LWP 233)]
[New Thread 0x7ffff7510700 (LWP 234)]
[New Thread 0x7ffff6d00700 (LWP 235)]
[Switching to Thread 0x7ffffcdc0700 (LWP 223)]

Breakpoint 1, worker (arg=0x60dcfc) at chatty.c:440
440	                    SYS(sendRequest(fd, &(outmsg)), -1, "Errore sendRequest GETPREVMSGS_OP");
441	                    if (nummsg > 0)
443	                        icl_entry_t * auxa = NULL;
444	                        icl_entry_t * corr = pvmsg_list->head;
445	                        while(corr!= NULL)
447	                            printf("Worker[%d]: Messaggio dalla history: %s\n", idnumber, ((msg_data_t *)corr->data)->buf);
448	                            setHeader(&outmsg.hdr, ((msg_data_t *)corr->data)->type, (char *)corr->key);
449	                            setData(&outmsg.data, inmsg.hdr.sender, ((msg_data_t *)corr->data)->buf, ((msg_data_t *)corr->data)->len);
450	                            SYS(sendRequest(fd, &outmsg), -1, "Errore sendRequest GETPREVMSGS_OP");
451	                            if(((msg_data_t *)corr->data)->type == TXT_MESSAGE)
452	                                updateStats(0, 0, 1, -1, 0, 0, 0);
453	                            auxa = corr;
454	                            corr = corr->next;
455	                            free_data_msg(auxa->data);
456	                            free_pointer(auxa->key);
445	                        while(corr!= NULL)
458	                    destroy_g(pvmsg_list);
460	                    PTHREAD_MUTEX_UNLOCK(&mux_users[hash_lock(hash1)], "mux getpvmsg");
687	                PTHREAD_MUTEX_LOCK(&mux_fd, "mux fd");
688	                printf("Worker[%d]: Rimetto il fd %d nel set\n", idnumber, fd);                                
689	                FD_SET(fd, &set);
690	                if(fd > fd_num)
691	                    fd_num = fd;
692	                PTHREAD_MUTEX_UNLOCK(&mux_fd, "mux fd");
717	        fflush(stdout);
131	    while(!eflag){
133	        setHeader(&outmsg.hdr, OP_FAIL, "");
134	        setData(&outmsg.data, "", NULL, (unsigned int) 0);
135	        setHeader(&inmsg.hdr, OP_FAIL, "");        
136	        setData(&inmsg.data, "", NULL, (unsigned int) 0);
139	        printf("Worker[%d]: In attesa di fd in coda..\n", idnumber);
140	        PTHREAD_MUTEX_LOCK(&mux_task_queue, "muxtaskq");
142	            pthread_cond_wait(&cond_taskq, &mux_task_queue);

Program received signal SIGTSTP, Stopped (user).
[Switching to Thread 0x7fffff7b0740 (LWP 215)]
0x00007ffffef05913 in select () at ../sysdeps/unix/syscall-template.S:81
81	../sysdeps/unix/syscall-template.S: File o directory non esistente.
Continuing with signal SIGINT.

Program received signal SIGTSTP, Stopped (user).
0x00007ffffef05913 in select () at ../sysdeps/unix/syscall-template.S:81
81	in ../sysdeps/unix/syscall-template.S
Undefined command: "mn".  Try "help".
[Thread 0x7ffff6d00700 (LWP 235) exited]
[Thread 0x7ffff7510700 (LWP 234) exited]
[Thread 0x7ffff7d20700 (LWP 233) exited]
[Thread 0x7ffff8530700 (LWP 232) exited]
[Thread 0x7ffff8d40700 (LWP 231) exited]
[Thread 0x7ffff9550700 (LWP 230) exited]
[Thread 0x7ffff9d60700 (LWP 229) exited]
[Thread 0x7ffffa570700 (LWP 228) exited]
[Thread 0x7ffffad80700 (LWP 227) exited]
[Thread 0x7ffffb590700 (LWP 226) exited]
[Thread 0x7ffffbda0700 (LWP 225) exited]
[Thread 0x7ffffc5b0700 (LWP 224) exited]
[Thread 0x7ffffcdc0700 (LWP 223) exited]
[Thread 0x7ffffd5d0700 (LWP 222) exited]
[Thread 0x7ffffdde0700 (LWP 221) exited]
[Thread 0x7ffffe5f0700 (LWP 220) exited]
[Thread 0x7ffffee00700 (LWP 219) exited]

Program terminated with signal SIGKILL, Killed.
The program no longer exists.
